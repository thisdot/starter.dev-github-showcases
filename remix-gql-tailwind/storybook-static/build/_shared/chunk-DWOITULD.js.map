{
  "version": 3,
  "sources": ["../../../app/components/RepoFilters/useRepoFilters.tsx"],
  "sourcesContent": ["import { useReducer } from 'react';\n\nexport enum RepositoryOrderField {\n  CreatedAt = 'CREATED_AT',\n  Name = 'NAME',\n  PushedAt = 'PUSHED_AT',\n  Stargazers = 'STARGAZERS',\n  UpdatedAt = 'UPDATED_AT',\n}\n\nexport enum OrderDirection {\n  Asc = 'ASC',\n  Desc = 'DESC',\n}\n\nexport type FiltersAPI = ReturnType<typeof useRepoFilters>;\n\nexport enum TypeFilter {\n  ALL = 'all',\n  FORKS = 'forked',\n  ARCHIVED = 'archived',\n}\n\nexport interface LanguageFilter {\n  label: string;\n  value: string;\n}\n\nexport enum ActionType {\n  CHANGE_SORT,\n  CHANGE_LANGUAGE,\n  CHANGE_TYPE,\n  SET_QUERY,\n  SET_LANGUAGES,\n  RESET_FILTERS,\n}\n\nexport interface FilterState {\n  sort: RepositoryOrderField;\n  query: string;\n  language: string;\n  type: TypeFilter;\n  languages?: LanguageFilter[];\n}\n\ntype FilterAction =\n  | {\n      type: ActionType.CHANGE_SORT;\n      payload: { sort: RepositoryOrderField };\n    }\n  | {\n      type: ActionType.CHANGE_LANGUAGE;\n      payload: { language: string };\n    }\n  | {\n      type: ActionType.CHANGE_TYPE;\n      payload: { type: TypeFilter };\n    }\n  | {\n      type: ActionType.SET_QUERY;\n      payload: { query: string };\n    }\n  | {\n      type: ActionType.SET_LANGUAGES;\n      payload: { languages: LanguageFilter[] };\n    }\n  | {\n      type: ActionType.RESET_FILTERS;\n    };\n\nconst initialState: FilterState = {\n  sort: RepositoryOrderField.UpdatedAt,\n  type: TypeFilter.ALL,\n  language: 'all',\n  query: '',\n  languages: undefined,\n};\n\nconst reducer = (state: FilterState, action: FilterAction) => {\n  switch (action.type) {\n    case ActionType.CHANGE_SORT:\n      return {\n        ...state,\n        sort: action.payload.sort,\n      };\n    case ActionType.CHANGE_LANGUAGE:\n      return {\n        ...state,\n        language: action.payload.language,\n      };\n    case ActionType.CHANGE_TYPE:\n      return {\n        ...state,\n        type: action.payload.type,\n      };\n    case ActionType.SET_QUERY:\n      return {\n        ...state,\n        query: action.payload.query,\n      };\n    case ActionType.RESET_FILTERS:\n      return {\n        ...state,\n        sort: RepositoryOrderField.UpdatedAt,\n        type: TypeFilter.ALL,\n        language: 'all',\n        query: '',\n      };\n    default:\n      return state;\n  }\n};\n\nexport function useRepoFilters() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const changeSort = (sort: RepositoryOrderField) => {\n    dispatch({\n      type: ActionType.CHANGE_SORT,\n      payload: { sort },\n    });\n  };\n\n  const changeLanguage = (language: string) => {\n    dispatch({\n      type: ActionType.CHANGE_LANGUAGE,\n      payload: { language },\n    });\n  };\n\n  const changeType = (type: TypeFilter) => {\n    dispatch({\n      type: ActionType.CHANGE_TYPE,\n      payload: { type },\n    });\n  };\n\n  const setQuery = (query: string) => {\n    dispatch({\n      type: ActionType.SET_QUERY,\n      payload: { query },\n    });\n  };\n\n  const setLanguages = (languages: LanguageFilter[]) => {\n    dispatch({\n      type: ActionType.SET_LANGUAGES,\n      payload: { languages },\n    });\n  };\n\n  const resetFilters = () => {\n    dispatch({\n      type: ActionType.RESET_FILTERS,\n    });\n  };\n\n  const isQueryActive = state.query !== '';\n  const isTypeActive = state.type !== TypeFilter.ALL;\n  const isLanguageActive = state.language !== 'all';\n  const isSortActive = state.sort !== RepositoryOrderField.UpdatedAt;\n  const isFiltersActive =\n    isQueryActive || isTypeActive || isLanguageActive || isSortActive;\n\n  return {\n    state,\n    changeSort,\n    changeLanguage,\n    changeType,\n    setQuery,\n    setLanguages,\n    resetFilters,\n    isQueryActive,\n    isTypeActive,\n    isLanguageActive,\n    isFiltersActive,\n  };\n}\n"],
  "mappings": ";;;;;;;AAAA;AAAA,mBAA2B;AAsE3B,IAAM,eAA4B;AAAA,EAChC,MAAM;AAAA,EACN,MAAM;AAAA,EACN,UAAU;AAAA,EACV,OAAO;AAAA,EACP,WAAW;AAAA;AAGb,IAAM,UAAU,CAAC,OAAoB,WAAyB;AAC5D,UAAQ,OAAO;AAAA,SACR;AACH,aAAO;AAAA,WACF;AAAA,QACH,MAAM,OAAO,QAAQ;AAAA;AAAA,SAEpB;AACH,aAAO;AAAA,WACF;AAAA,QACH,UAAU,OAAO,QAAQ;AAAA;AAAA,SAExB;AACH,aAAO;AAAA,WACF;AAAA,QACH,MAAM,OAAO,QAAQ;AAAA;AAAA,SAEpB;AACH,aAAO;AAAA,WACF;AAAA,QACH,OAAO,OAAO,QAAQ;AAAA;AAAA,SAErB;AACH,aAAO;AAAA,WACF;AAAA,QACH,MAAM;AAAA,QACN,MAAM;AAAA,QACN,UAAU;AAAA,QACV,OAAO;AAAA;AAAA;AAGT,aAAO;AAAA;AAAA;AAIN,0BAA0B;AAC/B,QAAM,CAAC,OAAO,YAAY,6BAAW,SAAS;AAE9C,QAAM,aAAa,CAAC,SAA+B;AACjD,aAAS;AAAA,MACP,MAAM;AAAA,MACN,SAAS,EAAE;AAAA;AAAA;AAIf,QAAM,iBAAiB,CAAC,aAAqB;AAC3C,aAAS;AAAA,MACP,MAAM;AAAA,MACN,SAAS,EAAE;AAAA;AAAA;AAIf,QAAM,aAAa,CAAC,SAAqB;AACvC,aAAS;AAAA,MACP,MAAM;AAAA,MACN,SAAS,EAAE;AAAA;AAAA;AAIf,QAAM,WAAW,CAAC,UAAkB;AAClC,aAAS;AAAA,MACP,MAAM;AAAA,MACN,SAAS,EAAE;AAAA;AAAA;AAIf,QAAM,eAAe,CAAC,cAAgC;AACpD,aAAS;AAAA,MACP,MAAM;AAAA,MACN,SAAS,EAAE;AAAA;AAAA;AAIf,QAAM,eAAe,MAAM;AACzB,aAAS;AAAA,MACP,MAAM;AAAA;AAAA;AAIV,QAAM,gBAAgB,MAAM,UAAU;AACtC,QAAM,eAAe,MAAM,SAAS;AACpC,QAAM,mBAAmB,MAAM,aAAa;AAC5C,QAAM,eAAe,MAAM,SAAS;AACpC,QAAM,kBACJ,iBAAiB,gBAAgB,oBAAoB;AAEvD,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA;",
  "names": []
}
