{
  "version": 3,
  "sources": ["browser-route-module:/home/adrian/Work/thisdot/starter.dev-github-showcases/remix-gql-tailwind/app/routes/$user/$repository/tree/$branch/$.tsx?browser", "../../../../../../../app/routes/$user/$repository/tree/$branch/$.tsx"],
  "sourcesContent": ["export { default } from \"/home/adrian/Work/thisdot/starter.dev-github-showcases/remix-gql-tailwind/app/routes/$user/$repository/tree/$branch/$.tsx\";", "import { json, LoaderFunction } from '@remix-run/node';\nimport { useLoaderData, useOutletContext } from '@remix-run/react';\nimport { parseQueryData } from '~/components/FileExplorer/parseQueryData';\nimport FileExplorerNav from '~/components/FileExplorerNav/FileExplorerNav';\nimport RepoHeader from '~/components/RepoHeader/RepoHeader';\nimport FileExplorer from '~/components/FileExplorer/FileExplorer.view';\nimport { parseTopics } from '~/components/RepoPage/parseTopics';\nimport { parseQuery } from '~/components/RepoReadMe/parseQuery';\nimport RepoReadMe from '~/components/RepoReadMe/RepoReadMe.view';\nimport { RepoContext, RepoProvider } from '~/context/RepoContext';\nimport gqlClient from '~/lib/graphql-client';\nimport { auth } from '~/services/auth.server';\nimport { REPO_PAGE_QUERY } from '~/lib/queries/RepoPage';\nimport { REPO_TREE_QUERY } from '~/lib/queries/FileExplorer';\nimport { REPO_README_QUERY } from '~/lib/queries/RepoReadMe';\ntype LoaderData = {\n  context: any;\n  items: any;\n  readme: any;\n};\nexport const loader: LoaderFunction = async ({ params, request }) => {\n  const { accessToken } = await auth.isAuthenticated(request, {\n    failureRedirect: '/login',\n  });\n\n  let url = new URL(request.url);\n  const pathname = url.pathname;\n  const basePath = pathname.split('/');\n  const index = basePath.indexOf(`${params.branch}`);\n  const path = basePath.splice(index + 1);\n\n  const { repository } = await gqlClient.request(\n    REPO_PAGE_QUERY,\n    {\n      owner: params.user,\n      name: params.repository,\n    },\n    {\n      authorization: `Bearer ${accessToken}`,\n    }\n  );\n\n  const formattedPath = Array.isArray(path) ? path.join('/') : path;\n  const defaultBranch = 'HEAD';\n\n  const context: RepoContext = {\n    owner: params.user!,\n    name: params.repository!,\n    branch: repository?.defaultBranchRef?.name ?? defaultBranch,\n    path: formattedPath,\n    pathname: pathname,\n    data: repository\n      ? {\n          // @ts-ignore - generated types be like that\n          ...repository,\n          isOrg: typeof repository.owner?.orgName === 'string',\n          watcherCount: repository.watchers.totalCount,\n          openIssueCount: repository.issues.totalCount,\n          openPullRequestCount: repository.pullRequests.totalCount,\n          topics: parseTopics(repository.topics?.nodes),\n        }\n      : undefined,\n  };\n\n  const data = await gqlClient.request(\n    REPO_TREE_QUERY,\n    {\n      owner: params.user,\n      name: params.repository,\n      expression: `${context.branch}:${context.path}`,\n    },\n    {\n      authorization: `Bearer ${accessToken}`,\n    }\n  );\n\n  const items = parseQueryData(data);\n\n  if (items.length < 1)\n    throw new Response('Not Found', {\n      status: 404,\n    });\n\n  const readmeData = await gqlClient.request(\n    REPO_README_QUERY,\n    {\n      owner: params.user,\n      name: params.repository,\n      expression: context.path\n        ? `HEAD:${context.path}/README.md`\n        : 'HEAD:README.md',\n    },\n    {\n      authorization: `Bearer ${accessToken}`,\n    }\n  );\n\n  const readme = parseQuery(readmeData);\n\n  return json<LoaderData>({ context, items, readme });\n};\n\nexport default function Screen() {\n  const { context, items, readme } = useLoaderData<LoaderData>();\n  return (\n    <RepoProvider value={context}>\n      <RepoHeader />\n      <div className=\"mx-auto max-w-screen-2xl py-8 px-4\">\n        <div className=\"grid grid-cols-12 gap-8\">\n          <div className=\"col-span-12\">\n            <FileExplorerNav />\n            <FileExplorer\n              items={items}\n              branch={context.branch}\n              basePath={`/${context.owner}/${context.name}`}\n              repoPath={context.path}\n            />\n            {readme && <RepoReadMe readme={readme} />}\n          </div>\n        </div>\n      </div>\n    </RepoProvider>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;ACAA;AAWA,kBAAqB;AA2FN,kBAAkB;AAC/B,QAAM,EAAE,SAAS,OAAO,WAAW;AACnC,SACE,oCAAC,cAAD;AAAA,IAAc,OAAO;AAAA,KACnB,oCAAC,oBAAD,OACA,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,oCAAC,yBAAD,OACA,oCAAC,2BAAD;AAAA,IACE;AAAA,IACA,QAAQ,QAAQ;AAAA,IAChB,UAAU,IAAI,QAAQ,SAAS,QAAQ;AAAA,IACvC,UAAU,QAAQ;AAAA,MAEnB,UAAU,oCAAC,yBAAD;AAAA,IAAY;AAAA;AAAA;",
  "names": []
}
