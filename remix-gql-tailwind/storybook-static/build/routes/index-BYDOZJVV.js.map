{
  "version": 3,
  "sources": ["browser-route-module:/home/adrian/Work/thisdot/starter.dev-github-showcases/remix-gql-tailwind/app/routes/index.tsx?browser", "../../../app/routes/index.tsx", "../../../app/components/UserTopRepos/UserTopRepos.view.tsx", "../../../app/components/UserTopRepos/UserTopRepos.classNames.ts", "../../../app/components/UserGists/UserGists.view.tsx", "../../../app/components/UserGists/container.tsx", "../../../app/components/UserGists/container.classNames.ts", "../../../app/components/UserGists/UserGists.classNames.ts"],
  "sourcesContent": ["export { ErrorBoundary, default } from \"/home/adrian/Work/thisdot/starter.dev-github-showcases/remix-gql-tailwind/app/routes/index.tsx\";", "import { json, LoaderFunction } from '@remix-run/node';\nimport { useLoaderData } from '@remix-run/react';\nimport type { GitHubProfile } from 'remix-auth-github';\nimport { auth } from '~/services/auth.server';\nimport gqlClient from '~/lib/graphql-client';\nimport { parseQuery } from '~/components/UserTopRepos/parseQuery';\nimport { parseQueryUserGists } from '~/components/UserGists/parseQuery';\nimport { USER_TOP_REPOS_QUERY } from '~/lib/queries/UserTopRepos';\nimport { USER_GISTS_QUERY } from '~/lib/queries/UserGists';\nimport UserTopReposView from '~/components/UserTopRepos/UserTopRepos.view';\nimport UserGistsView from '~/components/UserGists/UserGists.view';\nimport { TopRepo } from '~/components/UserTopRepos/types';\nimport { GistItem } from '~/components/UserGists/types';\n\ntype LoaderData = {\n  profile: GitHubProfile;\n  userRepos: TopRepo[];\n  userGists: GistItem[];\n};\n\n// localized ErrorBoundary\nexport function ErrorBoundary({ error }: any) {\n  return <div className=\"text-sm\">Error: {error.message}</div>;\n}\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const { profile, accessToken } = await auth.isAuthenticated(request, {\n    failureRedirect: '/login',\n  });\n  const repos = await gqlClient.request(USER_TOP_REPOS_QUERY, undefined, {\n    authorization: `Bearer ${accessToken}`,\n  });\n  const gists = await gqlClient.request(USER_GISTS_QUERY, undefined, {\n    authorization: `Bearer ${accessToken}`,\n  });\n\n  const userRepos = parseQuery(repos);\n  const userGists = parseQueryUserGists(gists);\n\n  return json<LoaderData>({ profile, userRepos, userGists });\n};\n\nexport default function Screen() {\n  const { profile, userRepos, userGists } = useLoaderData<LoaderData>();\n\n  return (\n    <div className=\"flex  min-h-[calc(100vh-70px)] w-full flex-col-reverse bg-gray-100 lg:flex-row\">\n      <aside className=\"w-full bg-white p-8 lg:w-96\">\n        <UserGistsView gists={userGists} />\n      </aside>\n      <main className=\"w-full max-w-screen-lg\">\n        <div className=\"p-12\">\n          <h2 className=\"mb-4 text-lg font-medium\">Top Repositories</h2>\n          <UserTopReposView repos={userRepos} login={profile._json.login} />\n        </div>\n      </main>\n    </div>\n  );\n}\n", "import type { TopRepo } from './types';\nimport { Link } from '@remix-run/react';\nimport * as styles from './UserTopRepos.classNames';\nimport RepoMeta from '../RepoMeta/RepoMeta';\nimport PrivacyBadge from '../PrivacyBadge/PrivacyBadge';\n\ninterface UserTopReposViewProps {\n  login: string;\n  repos: TopRepo[];\n}\n\nfunction UserTopReposView({ repos, login }: UserTopReposViewProps) {\n  return (\n    <div className={styles.container}>\n      {repos.map(\n        ({\n          id,\n          name,\n          owner,\n          description,\n          stargazerCount,\n          forkCount,\n          language,\n          languageColor,\n          updatedAt,\n          isPrivate,\n        }) => (\n          <div key={id} className={styles.item}>\n            <h3 className=\"mb-2\">\n              <Link to={`/${owner}/${name}`} className={styles.headingLink}>\n                {name}\n              </Link>\n              <PrivacyBadge\n                isPrivate={isPrivate}\n                className=\"relative bottom-0.5\"\n              />\n            </h3>\n            <div className={styles.description}>{description}</div>\n            <RepoMeta\n              language={language}\n              languageColor={languageColor}\n              forkCount={forkCount}\n              stargazerCount={stargazerCount}\n              updatedAt={updatedAt}\n            />\n          </div>\n        )\n      )}\n      <div className={styles.linkContainer}>\n        <Link to={`/${login}`} className={styles.allRepoLink}>\n          View all repositories\n        </Link>\n      </div>\n    </div>\n  );\n}\n\nexport default UserTopReposView;\n", "export const container = 'w-full border rounded-lg relative bg-white';\nexport const item = 'p-4 border-b';\nexport const headingLink =\n  'text-xl text-blue-600 font-semibold hover:underline mr-3';\nexport const description = 'text-gray-600 text-sm max-w-prose -mb-1 -mt-1';\nexport const linkContainer = 'bg-gray-50 p-5 w-full text-center';\nexport const allRepoLink = 'font-semibold text-gray-600 hover:text-blue-500';\n", "import type { GistItem } from './types';\nimport Container from './container';\n\nimport * as styles from './UserGists.classNames';\n\ninterface UserGistsProps {\n  gists?: GistItem[];\n}\n\nfunction UserGistsView({ gists = [] }: UserGistsProps) {\n  return (\n    <Container>\n      <div className=\"mt-3\">\n        {gists.map((gist) => (\n          <div key={`${gist.id}-${gist.name}`} className=\"my-1\">\n            <a href={gist.url} className={styles.link} target=\"_blank\">\n              {gist.name}\n            </a>\n          </div>\n        ))}\n      </div>\n    </Container>\n  );\n}\n\nexport default UserGistsView;\n", "import type { ReactNode } from 'react';\nimport * as styles from './container.classNames';\n\ninterface ContainerProps {\n  children: ReactNode;\n}\n\nfunction Container({ children }: ContainerProps) {\n  return (\n    <div className={styles.container}>\n      <h3 className=\"font-semibold\">Gists</h3>\n      {children}\n    </div>\n  );\n}\n\nexport default Container;\n", "export const container = 'py-8 border-t border-b';\n", "export const link = 'text-sm hover:text-blue-500 hover:underline';\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAAA;;;ACAA;AAGA,kBAAqB;;;ACHrB;;;ACAA;AAAO,IAAM,YAAY;AAClB,IAAM,OAAO;AACb,IAAM,cACX;AACK,IAAM,cAAc;AACpB,IAAM,gBAAgB;AACtB,IAAM,cAAc;;;ADK3B,0BAA0B,EAAE,OAAO,SAAgC;AACjE,SACE,oCAAC,OAAD;AAAA,IAAK,WAAkB;AAAA,KACpB,MAAM,IACL,CAAC;AAAA,IACC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,QAEA,oCAAC,OAAD;AAAA,IAAK,KAAK;AAAA,IAAI,WAAkB;AAAA,KAC9B,oCAAC,MAAD;AAAA,IAAI,WAAU;AAAA,KACZ,oCAAC,MAAD;AAAA,IAAM,IAAI,IAAI,SAAS;AAAA,IAAQ,WAAkB;AAAA,KAC9C,OAEH,oCAAC,sBAAD;AAAA,IACE;AAAA,IACA,WAAU;AAAA,OAGd,oCAAC,OAAD;AAAA,IAAK,WAAkB;AAAA,KAAc,eACrC,oCAAC,kBAAD;AAAA,IACE;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,QAKR,oCAAC,OAAD;AAAA,IAAK,WAAkB;AAAA,KACrB,oCAAC,MAAD;AAAA,IAAM,IAAI,IAAI;AAAA,IAAS,WAAkB;AAAA,KAAa;AAAA;AAQ9D,IAAO,4BAAQ;;;AEzDf;;;ACAA;;;ACAA;AAAO,IAAM,aAAY;;;ADOzB,mBAAmB,EAAE,YAA4B;AAC/C,SACE,oCAAC,OAAD;AAAA,IAAK,WAAkB;AAAA,KACrB,oCAAC,MAAD;AAAA,IAAI,WAAU;AAAA,KAAgB,UAC7B;AAAA;AAKP,IAAO,oBAAQ;;;AEhBf;AAAO,IAAM,OAAO;;;AHSpB,uBAAuB,EAAE,QAAQ,MAAsB;AACrD,SACE,oCAAC,mBAAD,MACE,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACZ,MAAM,IAAI,CAAC,SACV,oCAAC,OAAD;AAAA,IAAK,KAAK,GAAG,KAAK,MAAM,KAAK;AAAA,IAAQ,WAAU;AAAA,KAC7C,oCAAC,KAAD;AAAA,IAAG,MAAM,KAAK;AAAA,IAAK,WAAkB;AAAA,IAAM,QAAO;AAAA,KAC/C,KAAK;AAAA;AASpB,IAAO,yBAAQ;;;AHJR,uBAAuB,EAAE,SAAc;AAC5C,SAAO,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KAAU,WAAQ,MAAM;AAAA;AAoBjC,kBAAkB;AAC/B,QAAM,EAAE,SAAS,WAAW,cAAc;AAE1C,SACE,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,oCAAC,SAAD;AAAA,IAAO,WAAU;AAAA,KACf,oCAAC,wBAAD;AAAA,IAAe,OAAO;AAAA,OAExB,oCAAC,QAAD;AAAA,IAAM,WAAU;AAAA,KACd,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,oCAAC,MAAD;AAAA,IAAI,WAAU;AAAA,KAA2B,qBACzC,oCAAC,2BAAD;AAAA,IAAkB,OAAO;AAAA,IAAW,OAAO,QAAQ,MAAM;AAAA;AAAA;",
  "names": []
}
